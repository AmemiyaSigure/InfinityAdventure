buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.16.5-1.0.0'
group = 'cx.rain.mc.infadv' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'infadv'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            args '--mixin.config=mixins.infadv.json'

            mods {
                infadv {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            args '--mixin.config=mixins.infadv.json'

            mods {
                infadv {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'infadv', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--mixin.config=mixins.infadv.json'

            mods {
                infadv {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url = "file://${projectDir}/libs"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.1'

    implementation fg.deobf("mods:ForgeXray:1.0.5-1.16.x")
    implementation fg.deobf("mods:jei:1.16.4-7.6.1.71")
    implementation fg.deobf("mods:JustEnoughResources:1.16.4-0.12.0.109")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "infadv",
            "Specification-Vendor": "AmemiyaSigure",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"AmemiyaSigure",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "mixins.infadv.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

mixin {
    add sourceSets.main, "mixins.infadv.refmap.json"
}

sourceSets {
    main {
        ext.refMap = "mixins.infadv.refmap.json"

        // Include resources generated by data generators.
        resources { srcDir 'src/generated/resources' }
    }
}
